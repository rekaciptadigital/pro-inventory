'use client';

import { useFormContext } from 'react-hook-form';
import {
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormDescription,
} from '@/components/ui/form';
import { Input } from '@/components/ui/input';
import { useBrands } from '@/lib/hooks/use-brands';
import { useProductTypes } from '@/lib/hooks/use-product-types';
import { useVariantTypes } from '@/lib/hooks/use-variant-types';
import { generateSKU, generateFullProductName } from '@/lib/utils/sku-generator';
import { useEffect } from 'react';

export function AutoGeneratedFields() {
  const { brands } = useBrands();
  const { productTypes } = useProductTypes();
  const { variantTypes } = useVariantTypes();
  const form = useFormContext();

  const brandId = form.watch('brand');
  const productTypeId = form.watch('productTypeId');
  const productName = form.watch('productName');
  const variants = form.watch('variants');

  useEffect(() => {
    if (!brandId || !productTypeId || !productName) return;

    const brand = brands.find(b => b.id === brandId);
    const productType = productTypes.find(pt => pt.id === productTypeId);
    
    if (!brand || !productType) return;

    // Generate and set SKU
    const sku = generateSKU(brand, productType, variants, variantTypes);
    form.setValue('sku', sku);

    // Generate and set full product name
    const fullName = generateFullProductName(brand, productType, productName, variants, variantTypes);
    form.setValue('fullProductName', fullName);
  }, [brandId, productTypeId, productName, variants, form, brands, productTypes, variantTypes]);

  return (
    <div className="space-y-4">
      <FormField
        control={form.control}
        name="sku"
        render={({ field }) => (
          <FormItem>
            <FormLabel>Product SKU</FormLabel>
            <FormControl>
              <Input {...field} readOnly className="bg-muted" />
            </FormControl>
            <FormDescription>
              Auto-generated unique SKU based on brand, type, and variants
            </FormDescription>
          </FormItem>
        )}
      />

      <FormField
        control={form.control}
        name="fullProductName"
        render={({ field }) => (
          <FormItem>
            <FormLabel>Full Product Name</FormLabel>
            <FormControl>
              <Input {...field} readOnly className="bg-muted" />
            </FormControl>
            <FormDescription>
              Auto-generated full product name including brand, type, and variants
            </FormDescription>
          </FormItem>
        )}
      />
    </div>
  );
}